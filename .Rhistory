gmmreg3 <- pgmm(logValue.Gap ~ lag(logValue.Gap, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg4 <- pgmm(logValue.IQR ~ lag(logValue.IQR, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
summary(gmmreg1)
summary(gmmreg2)
summary(gmmreg3)
summary(gmmreg4)
dataX <- RegressionDat %>%
mutate(id = paste0(Country, Group),
DomDummy = as.factor(ifelse(DomYieldShock >= 0.2, 1, 0)),
ForDummy = as.factor(ifelse(DomYieldShock <= -0.1, 1, 0)))
dataX <- pdata.frame(dataX, index = c('id', 'mktYear'))
gmmreg4 <- pgmm(logValue.IQR ~ lag(logValue.IQR, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
summary(gmmreg4)
summary(gmmreg3)
gmmreg3 <- pgmm(logValue.Gap ~ lag(logValue.Gap, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
summary(gmmreg3)
gmmreg2 <- pgmm(SDlogChange ~ lag(SDlogChange, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
summary(gmmreg2)
summary(gmmreg4)
# Semi-parametric regression.
ksel <- 10
#summary(RegressionDat)
gamReg1 <- mgcv::gam(deTrendCubic.SD ~ s(DomYieldShock, bs = 'tp', k = ksel) +
s(ExtYieldDev.4YearAve, bs = 'cr', k = ksel) +
REER_SD + BeginStockRatio + perCapitaGDPShock +
factor(Country) + factor(City) + factor(MarketChain) + factor(mktYear),
data = filter(RegressionDat, DomYieldShock >= -0.6))
summary(gamReg1)
?gam
anova(gamReg1)
anova(gamReg1, mgcv::gam(deTrendCubic.SD ~ DomYieldShock +
ExtYieldDev.4YearAve +
REER_SD + BeginStockRatio + perCapitaGDPShock +
factor(Country) + factor(City) + factor(MarketChain) + factor(mktYear),
data = filter(RegressionDat, DomYieldShock >= -0.6)), test = 'F')
set.seed(0)
n<-200
sig<-2
x0 <- rep(1:4,50)
x1 <- runif(n, 0, 1)
x2 <- runif(n, 0, 1)
x3 <- runif(n, 0, 1)
y <- 2 * x0
y <- y + exp(2 * x1)
y <- y + 0.2 * x2^11 * (10 * (1 - x2))^6 + 10 * (10 * x2)^3 * (1 - x2)^10
e <- rnorm(n, 0, sig)
y <- y + e
x0<-as.factor(x0)
b<-gam(y~x0+s(x1)+s(x2)+s(x3))
anova(b)
b1<-gam(y~x0+s(x1)+s(x2))
anova(b,b1,test="F")
dataX <- RegressionDat %>%
mutate(id = paste0(Country, Group),
DomDummy = as.factor(ifelse(DomYieldShock >= 0.15, 1, 0)),
ForDummy = as.factor(ifelse(DomYieldShock <= -0.1, 1, 0)))
dataX <- pdata.frame(dataX, index = c('id', 'mktYear'))
gmmreg1 <- pgmm(deTrendCubic.SD ~ lag(deTrendCubic.SD, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg2 <- pgmm(SDlogChange ~ lag(SDlogChange, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg3 <- pgmm(logValue.Gap ~ lag(logValue.Gap, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg4 <- pgmm(logValue.IQR ~ lag(logValue.IQR, 1) + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
summary(gmmreg1)
rm(list = ls())
library(dplyr)
library(tidyr)
library(data.table)
library(countrycode)
library(lfe)
library(mgcv)
library(ggplot2)
library(gridExtra)
library(texreg)
library(grid)
#library(stargazer)
setwd('~')
#-------------------------------------------------------------------------------------------------------------------#
# Regression
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#
rm(list=ls())
RegressionDat <- fread('../Dropbox (Personal)/ExtShock/5_Data/RegressionDataV2_May2019.csv')
library(plm)
dataX <- RegressionDat %>%
mutate(id = paste0(Country, Group),
DomDummy = as.factor(ifelse(DomYieldShock >= 0.15, 1, 0)),
ForDummy = as.factor(ifelse(DomYieldShock <= -0.1, 1, 0)))
dataX <- pdata.frame(dataX, index = c('id', 'mktYear'))
dataX <- RegressionDat %>%
mutate(id = paste0(Country, Group),
DomDummy = ifelse(DomYieldShock >= 0.15, 1, 0),
ForDummy = as.factor(ifelse(DomYieldShock <= -0.1, 1, 0)))
dataX <- pdata.frame(dataX, index = c('id', 'mktYear'))
gmmreg1 <- pgmm(deTrendCubic.SD ~ lag(deTrendCubic.SD, 1) + DomYieldShock + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg2 <- pgmm(SDlogChange ~ lag(SDlogChange, 1) + DomYieldShock + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg3 <- pgmm(logValue.Gap ~ lag(logValue.Gap, 1) + DomYieldShock + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
gmmreg4 <- pgmm(logValue.IQR ~ lag(logValue.IQR, 1) + DomYieldShock + DomDummy:DomYieldShock +
ExtYieldDev.4YearAve +
BeginStockRatio+ REER_SD + perCapitaGDPShock| lag(deTrendCubic.SD, 2:99),
data = dataX, effect = 'twoways', model = 'twosteps', robust = F)
summary(gmmreg1)
summary(gmmreg2)
summary(gmmreg1)
summary(gmmreg2)
summary(gmmreg3)
summary(gmmreg4)
# Estimate
#suppressPackageStartupMessages(library(doParallel))
rm(list = ls())
library(ranger)
library(ggplot2)
library(tibble)
source('DataPrepare.r')
setwd("C:/Users/bwchen/Box/bowen/cdlRotate")
source('DataPrepare.r')
setwd("C:/Users/bwchen/Box/bowen/nathan_landvalue")
# Estimate
#suppressPackageStartupMessages(library(doParallel))
rm(list = ls())
library(ranger)
library(ggplot2)
library(tibble)
source('DataPrepare.r')
#----------------------------------------------------------------------------------------------------------------#
# Fit the final model.
#----------------------------------------------------------------------------------------------------------------#
rf_model_final <- ranger(lnrppa ~ ., data = train, mtry = 25, importance = 'impurity')
#In-sample forecasting power
RFPredIn <- predict(rf_model_final, train)$predictions
par(mar = c(3,3,3,3))
plot(RFPredIn, train$lnrppa)
abline(a=0, b = 1, col = 'red')
postResample(train$lnrppa, RFPredIn) # RMSE:0.1778, r2: 0.9484, mae:0.1249
# Out-of-sample forecasting power
RFPredOut <- predict(rf_model_final, test)$predictions
par(mar = c(3,3,3,3))
plot(RFPredOut, test$lnrppa, cex = 0.1)
abline(a=0, b = 1, col = 'red')
postResample(test$lnrppa, RFPredOut) # RMSE: 0.4365, r2: 0.5967, mae:0.3111, meae: 0.2145
# Median absolute errors.
median(abs(test$lnrppa - RFPredOut))
x <- importance(rf_model_final)
x %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
'colnames<-'(c('rowname', 'Overall')) %>%
arrange(desc(Overall)) %>%
dplyr::slice(1:50) %>%
mutate(rowname = forcats::fct_inorder(rowname )) %>%
ggplot()+
geom_col(aes(x = rowname, y = Overall))+
coord_flip()+
theme_bw()
# Plot the marginal effects of selected variables.
pdp::partial(rf_model_final, pred.var = c('long_pvd'),
plot = TRUE, train = sample_n(train, 100))
postResample(train$lnrppa, RFPredIn) # RMSE:0.1778, r2: 0.9484, mae:0.1249
plot(RFPredIn, train$lnrppa)
abline(a=0, b = 1, col = 'red')
postResample(train$lnrppa, RFPredIn) # RMSE:0.1778, r2: 0.9484, mae:0.1249
plot(RFPredOut, test$lnrppa, cex = 0.1)
abline(a=0, b = 1, col = 'red')
postResample(test$lnrppa, RFPredOut) # RMSE: 0.4365, r2: 0.5967, mae:0.3111, meae: 0.2145
# Median absolute errors.
median(abs(test$lnrppa - RFPredOut))
# Median absolute errors.
median(abs(test$lnrppa - RFPredOut))
x %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
'colnames<-'(c('rowname', 'Overall')) %>%
arrange(desc(Overall)) %>%
dplyr::slice(1:50) %>%
mutate(rowname = forcats::fct_inorder(rowname )) %>%
ggplot()+
geom_col(aes(x = rowname, y = Overall))+
coord_flip()+
theme_bw()
# Plot the marginal effects of selected variables.
pdp::partial(rf_model_final, pred.var = c('long_pvd'),
plot = TRUE, train = sample_n(train, 100))
?pdp::partial
pdp::partial(rf_model_final, pred.var = c('lat_pvd'),
plot = TRUE, train = sample_n(train, 100))
plot(RFPredOut, test$lnrppa, cex = 0.1)
par(mar = c(5,5,5,5))
plot(RFPredOut, test$lnrppa, cex = 0.1)
abline(a=0, b = 1, col = 'red')
x %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
'colnames<-'(c('rowname', 'Overall')) %>%
arrange(desc(Overall)) %>%
dplyr::slice(1:50) %>%
mutate(rowname = forcats::fct_inorder(rowname )) %>%
ggplot()+
geom_col(aes(x = rowname, y = Overall))+
coord_flip()+
theme_bw()
test2 <- test %>%
mutate(pred = RFPredOut)
plot(test2$pred, test2$lnrppa)
plot(test2$pred, test2$lnrppa, cex = 0.2)
ggplot(data = test2) +
geom_point(aes(pred, lnrppa))
ggplot(data = test2) +
geom_point(aes(pred, lnrppa, color = validity0))
ggplot(data = test2) +
geom_point(aes(pred, lnrppa)) +
facet_wrap(~validity0)
ggplot(data = test2) +
geom_point(aes(pred, lnrppa)) +
geom_abline(slope = 1, intercept = 0) +
facet_wrap(~validity0)
ggplot(data = test2) +
geom_point(aes(pred, lnrppa)) +
geom_abline(slope = 1, intercept = 0, color = 'red') +
facet_wrap(~validity0)
ggplot(data = test2) +
geom_point(aes(pred, lnrppa), size = 1) +
geom_abline(slope = 1, intercept = 0, color = 'red') +
facet_wrap(~validity0)
library(cdlRotate)
devtools::install_github("cbw1243/cdlRotate")
libray(cdlRotate)
library(cdlRotate)
data <- GetCDLData(aoi = 17019, year = 2018, type = 'f')
library(cdlRotate)
library(RJSONIO)
help(RJSONIO)
?RJSONIO
sessionInfo()
library(CropScapeR)
library(utils)
sessionInfo()
fips <- 17019
year <- 2018
format = 'png'
url <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLFile?year=', year, '&fips=', fips)
url2 <- httr::GET(url)
url2X <- httr::content(url2, as = 'text')
num <- gregexpr('returnURL', url2X)[[1]]
url2 <- substr(url2X, num[1]+10, num[2]-3)
url3 <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLImage?files=',
url2, '&format=', format)
data <- httr::GET(url3)
dataX <- httr::content(data, 'text')
num <- gregexpr('returnURLArray', dataX)
url4 <- substr(dataX, num[[1]][1]+15, num[[1]][2]-3)
url4
if(is.null(destfile)) destfile <- tempfile()
destfile <- tempfile()
destfile
utils::download.file(url4, destfile = destfile, mode = 'wb')
devtools::document()
devtools::document()
devtools::document()
library(CropScapeR)
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
devtools::document()
library(CropScapeR)
data <- GetCDLData(aoi = 17019, year = 2018, type = 'f')
remove.packages("cdlRotate", lib="~/R/win-library/3.6")
data <- GetCDLData(aoi = 17019, year = 2018, type = 'f')
raster::plot(data)
aoi <- c(175207,2219600,175207,2235525,213693,2219600)
data <- GetCDLComp(aoi = aoi, year1 = 2017, year2 = 2018, type = 'ps')
points <- aoi
points <- paste0(points, collapse = ',')
url <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLComp?year1=',
year1,'&year2=',year2,'&points=', points, '&format=csv')
year1 = 2017; year2 = 2018
url <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLComp?year1=',
year1,'&year2=',year2,'&points=', points, '&format=csv')
data <- httr::GET(url)
dataX <- httr::content(data, 'text')
dataX
num <- gregexpr('returnReportURL', dataX)
url2 <- substr(dataX, num[[1]][1]+16, num[[1]][2]-3)
data <- data.table::fread(url2)
num <- gregexpr('returnTIFURL', dataX)
url2 <- substr(dataX, num[[1]][1]+13, num[[1]][2]-3)
data <- raster::raster(url2)
GetCDLCompPs <- function(points, year1, year2, mat = TRUE){
points <- paste0(points, collapse = ',')
url <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLComp?year1=',
year1,'&year2=',year2,'&points=', points, '&format=csv')
data <- httr::GET(url)
dataX <- httr::content(data, 'text')
if(isTRUE(mat)){
num <- gregexpr('returnReportURL', dataX)
url2 <- substr(dataX, num[[1]][1]+16, num[[1]][2]-3)
data <- data.table::fread(url2)
}else{
num <- gregexpr('returnTIFURL', dataX)
url2 <- substr(dataX, num[[1]][1]+13, num[[1]][2]-3)
data <- raster::raster(url2)
}
return(data)
}
#'
#' # Example 2. Retrieve data for a triangle defined by three coordinates in 2017-2018.
#' aoi <- c(175207,2219600,175207,2235525,213693,2219600)
#' data <- GetCDLComp(aoi = aoi, year1 = 2017, year2 = 2018, type = 'ps')
#' head(data, 5)
#'
#' # Example 3. Retrieve data for a rectangle box defined by four corner points in 2018.
#' data <- GetCDLComp(aoi = c(130783,2203171,153923,2217961), year1 = 2017, year2 = 2018, type = 'b')
#' head(data, 5)
#'
GetCDLComp <- function(aoi = NULL, year1 = NULL, year2 = NULL, type = NULL, mat = TRUE, crs = NULL){
targetCRS <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
if(!type %in% c('f', 'ps', 'b')) stop('The type value is wrong.')
if(type == 'f'){
data <- GetCDLCompF(fips = aoi, year1 = year1, year2 = year2, mat = mat)
}
if(type == 'ps'){
if(length(aoi) < 6) stop('For points, at least 6 values (3 coordinate points) have to be provided for aoi.')
if(!is.null(crs)){
numps <- length(aoi) # Number of points
oldpoints <- sp::SpatialPoints(cbind(aoi[seq(1, numps, by = 2)], aoi[seq(2, numps, by = 2)]), sp::CRS(crs))
newpoints <- sp::spTransform(oldpoints, targetCRS)
aoi <- paste0(as.vector(t(newpoints@coords)), collapse = ',')
}
data <- GetCDLCompPs(points = aoi, year1 = year1, year2 = year2, mat = mat)
}
if(type == 'b'){
if(length(aoi) != 4) stop('For box, 4 values (2 coordinate points) have to be provided for aoi.')
if(!is.null(crs)){
numps <- length(aoi) # Number of points
oldpoints <- sp::SpatialPoints(cbind(aoi[seq(1, numps, by = 2)], aoi[seq(2, numps, by = 2)]), sp::CRS(crs))
newpoints <- sp::spTransform(oldpoints, targetCRS)
aoi <- paste0(as.vector(t(newpoints@coords)), collapse = ',')
}
data <- GetCDLCompB(box = aoi, year1 = year1, year2 = year2, mat = mat)
}
data$aoi <- aoi
return(data)
}
data <- GetCDLComp(aoi = aoi, year1 = 2017, year2 = 2018, type = 'ps')
x <- GetCDLCompPs(aoi, 2017, 2018)
#'
#' # Example 2. Retrieve data for a triangle defined by three coordinates in 2017-2018.
#' aoi <- c(175207,2219600,175207,2235525,213693,2219600)
#' data <- GetCDLComp(aoi = aoi, year1 = 2017, year2 = 2018, type = 'ps')
#' head(data, 5)
#'
#' # Example 3. Retrieve data for a rectangle box defined by four corner points in 2018.
#' data <- GetCDLComp(aoi = c(130783,2203171,153923,2217961), year1 = 2017, year2 = 2018, type = 'b')
#' head(data, 5)
#'
GetCDLComp <- function(aoi = NULL, year1 = NULL, year2 = NULL, type = NULL, mat = TRUE, crs = NULL){
targetCRS <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
if(!type %in% c('f', 'ps', 'b')) stop('The type value is wrong.')
if(type == 'f'){
data <- GetCDLCompF(fips = aoi, year1 = year1, year2 = year2, mat = mat)
}
if(type == 'ps'){
if(length(aoi) < 6) stop('For points, at least 6 values (3 coordinates) have to be provided for aoi.')
if(!is.null(crs)){
numps <- length(aoi) # Number of points
oldpoints <- sp::SpatialPoints(cbind(aoi[seq(1, numps, by = 2)], aoi[seq(2, numps, by = 2)]), sp::CRS(crs))
newpoints <- sp::spTransform(oldpoints, targetCRS)
aoi <- paste0(as.vector(t(newpoints@coords)), collapse = ',')
}
data <- GetCDLCompPs(points = aoi, year1 = year1, year2 = year2, mat = mat)
}
if(type == 'b'){
if(length(aoi) != 4) stop('For box, 4 values (2 coordinate points) have to be provided for aoi.')
if(!is.null(crs)){
numps <- length(aoi) # Number of points
oldpoints <- sp::SpatialPoints(cbind(aoi[seq(1, numps, by = 2)], aoi[seq(2, numps, by = 2)]), sp::CRS(crs))
newpoints <- sp::spTransform(oldpoints, targetCRS)
aoi <- paste0(as.vector(t(newpoints@coords)), collapse = ',')
}
data <- GetCDLCompB(box = aoi, year1 = year1, year2 = year2, mat = mat)
}
return(data)
}
x <- GetCDLCompPs(aoi, 2017, 2018, type = 'ps')
data <- GetCDLComp(aoi = aoi, year1 = 2017, year2 = 2018, type = 'ps')
data <- GetCDLComp(aoi = c(175207,2219600,175207,2235525,213693,2219600), year1 = 2017, year2 = 2018, type = 'ps')
library(CropScapeR)
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
library(CropScapeR)
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
GetCDLCompF <- function(fips, year1, year2, mat = TRUE){
url <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLComp?year1=',
year1,'&year2=',year2,'&fips=', fips, '&format=csv')
data <- httr::GET(url)
dataX <- httr::content(data, 'text')
if(isTRUE(mat)){
num <- gregexpr('returnReportURL', dataX)
url2 <- substr(dataX, num[[1]][1]+16, num[[1]][2]-3)
data <- data.table::fread(url2)
data$aoi <- aoi
}else{
num <- gregexpr('returnTIFURL', dataX)
url2 <- substr(dataX, num[[1]][1]+13, num[[1]][2]-3)
data <- raster::raster(url2)
}
return(data)
}
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
#' head(data, 5)
#'
#' # Example 2. Retrieve data for a triangle defined by three coordinates in 2017-2018.
#' data <- GetCDLComp(aoi = c(175207,2219600,175207,2235525,213693,2219600), year1 = 2017, year2 = 2018, type = 'ps')
#' head(data, 5)
#'
#' # Example 3. Retrieve data for a rectangle box defined by four corner points in 2018.
#' data <- GetCDLComp(aoi = c(130783,2203171,153923,2217961), year1 = 2017, year2 = 2018, type = 'b')
#' head(data, 5)
#'
GetCDLComp <- function(aoi, year1, year2, type, mat = TRUE, crs = NULL){
targetCRS <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
if(!type %in% c('f', 'ps', 'b')) stop('The type value is wrong.')
if(type == 'f'){
data <- GetCDLCompF(fips = aoi, year1 = year1, year2 = year2, mat = mat)
}
if(type == 'ps'){
if(length(aoi) < 6) stop('For points, at least 6 values (3 coordinates) have to be provided for aoi.')
if(!is.null(crs)){
numps <- length(aoi) # Number of points
oldpoints <- sp::SpatialPoints(cbind(aoi[seq(1, numps, by = 2)], aoi[seq(2, numps, by = 2)]), sp::CRS(crs))
newpoints <- sp::spTransform(oldpoints, targetCRS)
aoi <- paste0(as.vector(t(newpoints@coords)), collapse = ',')
}
data <- GetCDLCompPs(points = aoi, year1 = year1, year2 = year2, mat = mat)
}
if(type == 'b'){
if(length(aoi) != 4) stop('For box, 4 values (2 coordinate points) have to be provided for aoi.')
if(!is.null(crs)){
numps <- length(aoi) # Number of points
oldpoints <- sp::SpatialPoints(cbind(aoi[seq(1, numps, by = 2)], aoi[seq(2, numps, by = 2)]), sp::CRS(crs))
newpoints <- sp::spTransform(oldpoints, targetCRS)
aoi <- paste0(as.vector(t(newpoints@coords)), collapse = ',')
}
data <- GetCDLCompB(box = aoi, year1 = year1, year2 = year2, mat = mat)
}
return(data)
}
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
url <- paste0('https://nassgeodata.gmu.edu/axis2/services/CDLService/GetCDLComp?year1=',
year1,'&year2=',year2,'&fips=', fips, '&format=csv')
data <- httr::GET(url)
dataX <- httr::content(data, 'text')
if(isTRUE(mat)){
num <- gregexpr('returnReportURL', dataX)
url2 <- substr(dataX, num[[1]][1]+16, num[[1]][2]-3)
data <- data.table::fread(url2)
data$aoi <- aoi
}else{
num <- gregexpr('returnTIFURL', dataX)
url2 <- substr(dataX, num[[1]][1]+13, num[[1]][2]-3)
data <- raster::raster(url2)
}
num <- gregexpr('returnReportURL', dataX)
url2 <- substr(dataX, num[[1]][1]+16, num[[1]][2]-3)
data <- data.table::fread(url2)
data$aoi <- aoi
str(data)
data$aoi <- fips
library(CropScapeR)
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
devtools::document()
library(CropScapeR)
rm(list =ls())
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
sessionInfo()
devtools::document()
library(CropScapeR)
devtools::install_github('cbw1243/CropScapeR')
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
library(CropScapeR)
?GetCDLComp
data <- GetCDLComp(aoi = '17019', year1 = 2017, year2 = 2018, type = 'f')
head(data, 5)
